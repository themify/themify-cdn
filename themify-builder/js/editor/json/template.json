{"text":" <div class=\"module module-text {{ data.add_css_text }}<# data.text_drop_cap == 'dropcap' ? print( ' tb_text_dropcap' ) : ''; #>\"> <# if ( data.mod_title_text ) { #> <h3 class=\"module-title\">{{{ data.mod_title_text }}}<\/h3> <# } #> <div contenteditable=\"false\" data-name=\"content_text\" data-hasEditor class=\"tb_text_wrap\">{{{data.content_text?data.content_text.replace(\/(<|&lt;)!--more(.*?)?--(>|&gt;)\/, '<span class=\"tb-text-more-link-indicator\"><span>'):''}}}<\/div> <\/div> ","divider":" <# let style = '', align = 'custom' == data.divider_type && data.divider_align ? 'divider-' + data.divider_align : ''; if ( data.stroke_w_divider ){ style += 'border-width:'+ data.stroke_w_divider +'px; '; } if ( data.color_divider ){ style += 'border-color:' + api.Helper.toRGBA(data.color_divider) + '; '; } if ( data.top_margin_divider ){ style += 'margin-top:' + data.top_margin_divider + 'px; '; } if ( data.bottom_margin_divider ){ style += 'margin-bottom:'+ data.bottom_margin_divider +'px; '; } if ( 'custom' == data.divider_type && data.divider_width > 0 ){ style += 'width:'+ data.divider_width +'px; '; } #> <div class=\"module module-divider divider-{{ (data.divider_type || 'fullwidth') }} {{ (data.style_divider || 'solid') }} {{ align }} {{ data.css_divider }} tf_mw\" style=\"{{ style }}\"> <# if ( data.mod_title_divider ) { #> <h3 class=\"module-title\">{{{ data.mod_title_divider }}}<\/h3> <# } #> <\/div> ","image":" <# const fullwidth = data.auto_fullwidth == '1' ? 'auto_fullwidth' : '', titleTag=data.title_tag?data.title_tag:'h3'; let classWrap = data.style_image, image=''; if (data.caption_on_overlay == 'yes' && ('image-overlay' == classWrap || 'image-full-overlay' == classWrap)){ classWrap += ' active-caption-hover'; } #> <div class=\"module module-image {{ fullwidth }} {{ classWrap }} {{ data.css_image }} <# data.appearance_image ? print( data.appearance_image.split('|').join(' ') ) : ''; #> tf_mw\"> <# if ( data.mod_title_image ) { #> <h3 class=\"module-title\">{{{ data.mod_title_image }}}<\/h3> <# } if(data.url_image){ const w=data.width_image || '', h=data.height_image || ''; image ='<img data-w=\"width_image\" data-h=\"height_image\" width=\"'+w+'\" height=\"'+h+'\" data-name=\"url_image\" src=\"'+ data.url_image +'\">'; } #> <div class=\"image-wrap tf_rel tf_mw\"> <# if ( data.link_image ) { #> <a href=\"{{ data.link_image }}\"> <# if( data.image_zoom_icon == 'zoom' ) { icon=data.param_image == 'lightbox' ? 'ti-search' : 'ti-new-window'; #> <span class=\"zoom\"><# print(api.Helper.getIcon(icon).outerHTML)#><\/span> <# } #> {{{ image }}} <\/a> <# } else { #> {{{ image }}} <# } if ( 'image-overlay' != data.style_image ) { #> <\/div> <# } if( data.title_image || data.caption_image ) { #> <div class=\"image-content\"> <# if ( data.title_image ) { #> <{{titleTag}} class=\"image-title\"<# if(!data.link_image){#> contenteditable=\"false\" data-name=\"title_image\"<#}#>> <# if ( data.link_image ) { #> <a contenteditable=\"false\" data-name=\"title_image\" href=\"{{ data.link_image }}\">{{{ data.title_image }}}<\/a> <# } else { #> {{{ data.title_image }}} <# } #> <\/{{titleTag}}> <# } if( data.caption_image ) { #> <div contenteditable=\"false\" data-name=\"caption_image\" class=\"image-caption tb_text_wrap\">{{{ data.caption_image }}}<\/div> <# } #> <\/div> <# } if ( 'image-overlay' == data.style_image ) { #> <\/div> <# } #> <\/div> ","buttons":" <# var downloadLink = data.download_link == 'yes'? ' download' : ''; display=data.fullwidth_button?'':data.display, arr=data.content_button || []; #> <div class=\"module module-buttons {{ data.css_button }} {{ data.buttons_size!=='normal'?data.buttons_size:'' }} {{ data.buttons_style }} {{ data.buttons_shape!=='normal'?data.buttons_shape:'' }} {{ display }} {{ data.fullwidth_button }}\"> <# for(var i=0,len=arr.length;i<len;++i){;#> <div class=\"module-buttons-item tf_inline_b\"> <# let item=arr[i]; if ( item.link ) { if(item.title){ downloadLink+= ' title=\"'+item.title+'\"'; } let color=(!item.button_color_bg || item.button_color_bg=='default') ? 'tb_default_color' : item.button_color_bg, title = !item.title? '' : 'title=\"'+item.title+'\"', id = item.id ? 'id=\"' + item.id + '\"' : ''; #> <a class=\"ui builder_button {{ color }}\" href=\"{{ item.link }}\" {{downloadLink}} <# print(title)#> {{{id}}}> <# } if ( item.icon && (!item.icon_alignment || item.icon_alignment != 'right') ) { #> <em class=\"tf_inline_b tf_vmiddle\"><# print(api.Helper.getIcon(item.icon).outerHTML)#><\/em> <# } #> <span class=\"tf_inline_b tf_vmiddle\" contenteditable=\"false\" data-name=\"label\" data-repeat=\"content_button\">{{{ item.label }}}<\/span> <# if ( item.icon && item.icon_alignment == 'right' ) { #> <em><# print(api.Helper.getIcon(item.icon).outerHTML)#><\/em> <# } if ( item.link ) { #> <\/a> <# } #> <\/div> <# }#> <\/div> ","accordion":" <div class=\"module module-accordion {{ data.css_accordion }}\" data-behavior=\"{{ data.expand_collapse_accordion }}\"> <# if ( data.mod_title_accordion ) { #> <h3 class=\"module-title\">{{{ data.mod_title_accordion }}}<\/h3> <# } const color= undefined === data.color_accordion || 'default' == data.color_accordion ? 'tb_default_color' : data.color_accordion, tabId=data.cid.replace('tb_',''), arr=data.content_accordion || []; #> <ul class=\"module-accordion ui {{ data.layout_accordion }} {{ color}} <# data.accordion_appearance_accordion? print( data.accordion_appearance_accordion.split('|').join(' ') ) : ''; #>\"> <# for(var i=0,len=arr.length;i<len;++i){ let item=arr[i], isOpen=item.default_accordion=='open'; #> <li<# if ( isOpen ) { #> class=\"builder-accordion-active\"<# } #>> <div class=\"accordion-title tf_rel\"> <a href=\"#acc-{{ tabId }}-{{ i }}\" aria-controls=\"acc-{{ data.cid }}-{{ i }}-content\" aria-expanded=\"{{ isOpen }}\"> <# if ( data.icon_accordion ) { #> <i class=\"accordion-icon<# if ( isOpen ) { #> tf_hide<# } #>\"><# print(api.Helper.getIcon(data.icon_accordion).outerHTML)#><\/i> <# } if ( data.icon_active_accordion ) { #> <i class=\"accordion-active-icon<# if ( !isOpen ) { #> tf_hide<# } #>\"><# print(api.Helper.getIcon(data.icon_active_accordion).outerHTML)#><\/i> <# } #> <span class=\"tb_title_accordion tf_w\" data-name=\"title_accordion\" data-repeat=\"content_accordion\" contenteditable=\"false\">{{{ item.title_accordion }}}<\/span> <\/a> <\/div> <div id=\"acc-{{ tabId }}-{{ i }}-content\" data-id=\"acc-{{ tabId }}-{{ i }}\" aria-hidden=\"{{!isOpen}}\" class=\"accordion-content<# if ( !isOpen ) { #> tf_hide<# } #> tf_clearfix\"> <div contenteditable=\"false\" data-name=\"text_accordion\" data-repeat=\"content_accordion\" data-hasEditor class=\"tb_text_wrap\">{{{ item.text_accordion }}}<\/div> <\/div> <\/li> <# } #> <\/ul> <\/div> ","alert":" <# var tag = data.title_tag?data.title_tag:'h3', color_alert = undefined === data.color_alert || 'default' == data.color_alert ? 'tb_default_color' : data.color_alert, layout=data.layout_alert || 'button-right', btn_color_alert = undefined === data.action_btn_color_alert || 'default' === data.action_btn_color_alert ? 'tb_default_color' : data.action_btn_color_alert; #> <div class=\"module module-alert ui {{ layout }} {{ color_alert }} {{ data.css_alert }} <# data.appearance_alert ? print( data.appearance_alert.split('|').join(' ') ) : ''; #>\"> <# if ( data.mod_title_alert ) { #> <h3 class=\"module-title\">{{{ data.mod_title_alert }}}<\/h3> <# } #> <div class=\"alert-inner\"> <div class=\"alert-content\"> <{{tag}} class=\"alert-heading\" contenteditable=\"false\" data-name=\"heading_alert\">{{{ data.heading_alert }}}<\/{{tag}}> <div class=\"tb_text_wrap\" contenteditable=\"false\" data-name=\"text_alert\">{{{ data.text_alert }}}<\/div> <\/div> <# if ( data.action_btn_text_alert ) { #> <div class=\"alert-button\"> <a href=\"{{ data.action_btn_link_alert }}\" class=\"ui builder_button {{ btn_color_alert }} <# data.action_btn_appearance_alert ? print( data.action_btn_appearance_alert.split('|').join(' ') ) : ''; #><# 'url'!==data.alert_button_action ? print( ' alert-close' ) : ''; #>\"> <span class=\"tb_alert_text\" contenteditable=\"false\" data-name=\"action_btn_text_alert\">{{{ data.action_btn_text_alert }}}<\/span> <\/a> <\/div> <# } #> <\/div> <div class=\"alert-close tf_close\"><\/div> <\/div> ","box":" <div class=\"module module-box\"> <# if ( data.mod_title_box ) { #> <h3 class=\"module-title\">{{{ data.mod_title_box }}}<\/h3> <# } #> <div class=\"ui module-box-content <# data.color_box && data.color_box!=='default' ? print( data.color_box ):print('tb_default_color'); #> {{ data.add_css_box }} <# data.appearance_box ? print( data.appearance_box.split('|').join(' ') ) : ''; #>\"> <# if ( data.icon ) { #> <span class=\"tb_box_icon tb_size_{{{ data.icon_size }}}\" style=\"color:<# print( api.Helper.toRGBA( data.icon_color ) ) #>\"> <em><# print( api.Helper.getIcon( data.icon ).outerHTML ) #><\/em> <\/span> <# } #> <div contenteditable=\"false\" data-name=\"content_box\" data-hasEditor class=\"tb_text_wrap\">{{{ data.content_box }}}<\/div> <\/div> <\/div> ","callout":" <# var tag = data.title_tag?data.title_tag:'h3', color_callout = undefined === data.color_callout || 'default' == data.color_callout ? 'tb_default_color' : data.color_callout, btn_color_callout = undefined === data.action_btn_color_callout || 'default' == data.action_btn_color_callout ? 'tb_default_color' : data.action_btn_color_callout; #> <div class=\"module module-callout ui {{ data.layout_callout }} {{ color_callout }} {{ data.css_callout }} {{ data.background_repeat }} <# data.appearance_callout? print( data.appearance_callout.split('|').join(' ') ) : ''; #>\"> <# if ( data.mod_title_callout ) { #> <h3 class=\"module-title\">{{{ data.mod_title_callout }}}<\/h3> <# } #> <div class=\"callout-inner\"> <div class=\"callout-content tf_left\"> <{{tag}} class=\"callout-heading\" contenteditable=\"false\" data-name=\"heading_callout\">{{{ data.heading_callout }}}<\/{{tag}}> <div class=\"tb_text_wrap\" contenteditable=\"false\" data-name=\"text_callout\">{{{ data.text_callout }}}<\/div> <\/div> <# if ( data.action_btn_text_callout ) { #> <div class=\"callout-button tf_right tf_textr\"> <a href=\"{{ data.action_btn_link_callout }}\" class=\"ui builder_button {{ btn_color_callout }} <# data.action_btn_appearance_callout ? print( data.action_btn_appearance_callout.split('|').join(' ') ) : ''; #>\"> <span contenteditable=\"false\" data-name=\"action_btn_text_callout\" class=\"tb_callout_text\">{{{ data.action_btn_text_callout }}}<\/span> <\/a> <\/div> <# } #> <\/div> <\/div> ","code":" <div class=\"module module-code {{ data.css }} tf_scrollbar tb_prism_{{ data.theme }}\" data-theme=\"{{ data.theme }}\"> <# if ( data.m_t ) { #> <h3 class=\"module-title\">{{{ data.m_t }}}<\/h3> <# } #> <pre class=\"tf_rel tf_scrollbar tf_textl\"<# if(data.highlight){#> data-line=\"{{data.highlight}}\"<#}#>> <code class=\"language-{{data.lng}}<# if(data.numbers=='yes'){#> line-numbers<#}#>\">{{ data.code }}<\/code> <# if(data.copy=='yes'){#> <em class=\"tb_code_copy tf_opacity\"> <# print( api.Helper.getIcon('ti-clipboard').outerHTML ) #> <\/em> <#}#> <\/pre> <\/div> ","fancy-heading":" <# let inline=data.inline_text==='1'?' inline-fancy-heading':'', divider = ( 'no' == data.divider ) ? ' tb_hide_divider' : '', icon_type = data.icon_type ? data.icon_type : 'icon', icon = data.icon ? data.icon : '', image = data.image ? data.image : '', has_icon = icon !== '' || image !== '', icon_style = data.icon_c ? 'style=\"color: ' + api.Helper.toRGBA( data.icon_c ) + '\"' : '', heading_tag = !data.heading_tag ? 'h1' : data.heading_tag, text_alignment=data.text_alignment?'tf_text'+(data.text_alignment.replace('themify-text-',''))[0]:''; inline=inline===''?'tf_block':'tf_inline_b' #> <div class=\"module module-fancy-heading {{ data.css_class }}{{ inline }}{{divider}}\"> <{{ heading_tag }} class=\"fancy-heading {{ text_alignment }}\"> <span class=\"main-head {{inline}}\"<# if(!data.heading_link){ #> contenteditable=\"false\" data-name=\"heading\"<# } #>> <# if(!data.heading_link){ #> {{{ data.heading }}} <# }else{ #> <a contenteditable=\"false\" data-name=\"heading\" href=\"{{data.heading_link}}\">{{{ data.heading }}}<\/a> <# } #> <\/span> <# if ( has_icon ) { #> <span class=\"tb_fancy_heading_icon_wrap {{inline}}\"> <# if ( ! divider ) { #><span class=\"tb_fancy_heading_border tf_rel\"><\/span><# } #> <span class=\"tb_fancy_heading_icon\"> <# if ( icon_type === 'icon' && icon !== '' ) { #> <em {{{icon_style}}}><# print(api.Helper.getIcon( icon ).outerHTML) #><\/em> <# } else if ( image ) { #> <img src=\"{{image}}\"> <# } #> <\/span> <# if ( ! divider ) { #><span class=\"tb_fancy_heading_border tf_rel\"><\/span><# } #> <\/span> <# } #> <span class=\"sub-head {{inline}} tf_rel\"<# if(!data.sub_heading_link){ #> contenteditable=\"false\" data-name=\"sub_heading\"<# } #>> <# if(!data.sub_heading_link){ #> {{{ data.sub_heading }}}<# } else{ #> <a contenteditable=\"false\" data-name=\"sub_heading\" href=\"{{data.sub_heading_link}}\">{{{ data.sub_heading }}}<\/a> <# } #> <\/span> <\/{{ heading_tag }}> <\/div> ","feature":" <# const args=Object.assign({ icon_feature:'', icon_position:'', icon_bg_feature:'', circle_percentage_feature:'', layout_feature:'icon-top', title_tag:'h3' },data); args.circle_percentage_feature = args.circle_percentage_feature.replace('%',''); let w=args.circle_stroke_feature || 0, isEmpty=args.circle_percentage_feature<=0 || w==0, layout_mobile = args.layout_mobile?' data-layout-mobile=\"' + args.layout_mobile + '\" data-layout-desktop=\"' + args.layout_feature + '\"':'', chart_class = 'with-chart', insetColor=args.icon_bg_feature!=='' && args.icon_type_feature=='icon'?api.Helper.toRGBA(args.icon_bg_feature):'', st=''; if(w==1){ w=2; } let r='calc(50% - '+w\/2+'px)'; if(isEmpty){ chart_class='no-chart'; } else{ if(args.circle_percentage_feature>100){ args.circle_percentage_feature = '100'; } if(args.overlap_image_feature){ chart_class+=' with-overlay-image'; } } if(args.circle_size_feature=='custom' && args.custom_circle_size_feature){ st='width:'+args.custom_circle_size_feature+'px;height:'+args.custom_circle_size_feature+'px;'; } if(isEmpty && insetColor !== ''){ st+='background-color:'+insetColor; } #> <div class=\"module module-feature {{chart_class}} layout-{{ args.layout_feature }} size-{{args.circle_size_feature}} {{ args.css_feature }}\" {{{ layout_mobile }}}> <# if( args.mod_title_feature ) { #> <h3 class=\"module-title\">{{{ args.mod_title_feature }}}<\/h3> <# } #> <div class=\"module-feature-image tf_textc tf_rel\"> <# if(args.overlap_image_feature){ #> <img src=\"{{args.overlap_image_feature}}\" data-w=\"overlap_image_width\" data-h=\"overlap_image_height\" data-name=\"overlap_image_feature\" width=\"<#print(args.overlap_image_width || '')#>\" height=\"<#print(args.overlap_image_height || '')#>\"> <#} if(args.link_feature){ #> <a href=\"{{ args.link_feature }}\"> <#}#> <span class=\"module-feature-chart-html5 tf_box tf_rel tf_inline_b\"<# if(st!==''){#> style=\"{{st}}\"<#}#>> <# if(!isEmpty){#> <svg class=\"tf_abs tf_w tf_h\"> <circle class=\"tb_feature_fill\" r=\"{{r}}\" cx=\"50%\" cy=\"50%\" stroke-width=\"{{w}}\"\/> <circle class=\"tb_feature_stroke\" r=\"{{r}}\" cx=\"50%\" cy=\"50%\" stroke=\"{{api.Helper.toRGBA(args.circle_color_feature)}}\" stroke-width=\"{{w}}\" data-progress=\"{{args.circle_percentage_feature}}\" stroke-dasharray=\"0,10000\"\/> <# if(insetColor !== '' && args.icon_type_feature=='icon'){#> <circle class=\"tb_feature_bg\" r=\"calc(50% - <# print((w>1?(w-1):0))#>px)\" cx=\"50%\" cy=\"50%\" stroke-width=\"{{w}}\" fill=\"{{insetColor}}\" \/> <# }#> <\/svg> <# }#> <span class=\"chart-html5-circle tf_w tf_h\"> <# if(args.icon_type_feature=='icon'){ if(args.icon_feature){#> <em class=\"module-feature-icon tf_rel\"<# if(args.icon_color_feature!==''){ #> style=\"color:<# print(api.Helper.toRGBA(args.icon_color_feature)) #>\"<# } #>><# print(api.Helper.getIcon(args.icon_feature).outerHTML)#><\/em> <# } } else if(args.image_feature){ #> <img style=\"width:calc(100% - {{w*2}}px);height:calc(100% - {{w*2}}px)\" src=\"{{args.image_feature}}\"> <# } #> <\/span> <# if ( args.icon_type_feature == 'both' ) { let style = ( args.icon_color_feature !== '' ? 'color:' + api.Helper.toRGBA( args.icon_color_feature ) + ';' : '' ) + ( args.icon_bg_feature !== '' ? 'background-color:' + api.Helper.toRGBA(args.icon_bg_feature) + ';' : '' ); #> <span class=\"module-feature-icon-wrap tf_abs\" style=\"transform:rotate({{args.icon_position}}deg)\"> <span class=\"module-feature-icon\" style=\"transform:translateY(-50%) rotate(-{{args.icon_position}}deg);{{style}}\"><# print( api.Helper.getIcon(args.icon_feature).outerHTML ) #><\/span> <\/span> <# } #> <\/span> <# if(args.link_feature){ #> <\/a> <# } #> <\/div> <div class=\"module-feature-content tf_textc\"> <# if(data.title_feature!==''){ #> <{{args.title_tag}} class=\"module-feature-title\"<# if(!data.link_feature){#> data-name=\"title_feature\" contenteditable=\"false\"<#}#>> <# if(data.link_feature){ #> <a href=\"{{data.link_feature}}\" contenteditable=\"false\" data-name=\"title_feature\" href=\"{{data.link_feature}}\"> <#}#> {{{data.title_feature}}} <# if(data.link_feature){ #> <\/a> <#}#> <\/{{args.title_tag}}> <# } #> <div contenteditable=\"false\" data-name=\"content_feature\" data-hasEditor class=\"tb_text_wrap\"> {{{ data.content_feature }}} <\/div> <\/div> <\/div> ","icon":" <# let position = data.icon_position && data.icon_position!='undefined'? data.icon_position.replace('icon_position_','') : '', arr=data.content_icon || []; if(position){ position='tf_text'+position[0]; } #> <div class=\"module module-icon {{ data.css_icon }} {{ data.icon_size }} {{ data.icon_style }} {{ data.icon_arrangement }} {{ position }}\"> <# if( data.mod_title_icon ) { #> <h3 class=\"module-title\">{{{ data.mod_title_icon }}}<\/h3> <# } for(var i=0,len=arr.length;i<len;++i){ let item=arr[i], link_target = item.link_options == 'newtab' ? ' rel=\"noopener\" target=\"_blank\"' : '', link_lightbox_class = item.link_options == 'lightbox' ? \" class='lightbox-builder themify_lightbox'\" : '', color_bg = item.icon_color_bg=='default' ? 'tb_default_color' : item.icon_color_bg, lightbox_data = item.lightbox_width || item.lightbox_height ? (' data-zoom-config=\"'+item.lightbox_width+item.lightbox_width_unit+'|'+item.lightbox_height+item.lightbox_height_unit+'\"'): '', style = '', w=item.w_i || '', h=item.h_i || ''; if ( item.bg ) { style += 'background: ' + api.Helper.toRGBA( item.bg ) + ';'; } if ( item.c ) { style += 'color: ' + api.Helper.toRGBA( item.c ) + ';'; } #> <div class=\"module-icon-item\"> <# if(item.link){ #> <a href=\"{{ item.link }}\"{{ link_target }}{{{ link_lightbox_class }}}{{ lightbox_data }}> <# } if (item.icon_type!='image' && item.icon){ #> <em class=\"tf_box {{ color_bg }}\" style=\"{{ style }}\"><# print(api.Helper.getIcon(item.icon).outerHTML)#><\/em> <# } if (item.icon_type=='image' && item.image){ #> <img class=\"tf_box {{ color_bg }}\" src=\"{{ item.image }}\" data-no-update data-repeat=\"content_icon\" data-w=\"w_i\" data-h=\"h_i\" width=\"{{w}}\" height=\"{{h}}\" data-name=\"image\"> <# } if (item.label && item.hide_label!='hide'){ #> <span contenteditable=\"false\" data-name=\"label\" data-no-update data-repeat=\"content_icon\">{{{ item.label }}}<\/span> <# } if(item.link){ #> <\/a> <# } #> <\/div> <# }#> <\/div> ","link-block":" <# const color = undefined === data.color || data.color=='default' ? 'tb_default_color' : data.color, tag=data.link?'a':'span'; #> <div class=\"module module-link-block {{ data.shape!=='normal'?data.shape:'' }} {{ data.style }} {{ data.lb_layout }} {{ data.disp_icon_btm }}\"> <{{tag}} class=\"tb_link_block_container ui {{ color }}\"<# if(data.link){#> href=\"{{data.link}}\"<#}#> > <#if (data.icon_type!='image' && data.icon){ #> <div class=\"tf-lb-icon\"> <em class=\"tb_link_block_icon tf_inline_b\"><# print(api.Helper.getIcon(data.icon).outerHTML)#><\/em> <\/div> <# } #> <div class=\"tf-lb-content\"> <# if (data.icon_type=='image' && data.image){ #> <img class=\"tf_vmiddle tf_box tb_link_block_img\" src=\"{{ data.image }}\"> <# } if (data.heading ) { #> <div class=\"tb_link_block_heading\" contenteditable=\"false\" data-name=\"heading\">{{{ data.heading }}}<\/div> <# } if (data.blurb ) { #> <div class=\"tb_link_block_blurb\" contenteditable=\"false\" data-name=\"blurb\">{{{ data.blurb }}}<\/div> <# } #> <\/div> <\/{{ tag}}> <\/div> ","login":" <# var alignment = !data.alignment ||'left' == data.alignment ? '' : ('center' == data.alignment?' tb_login_c':' tf_right'); #> <div class=\"module module-login {{ data.css }}\"> <div class=\"tb_login_wrap{{ alignment }}\"> <# if ( data.mod_title ) { #> <h3 class=\"module-title\">{{{ data.mod_title }}}<\/h3> <# } #> <form class=\"tb_login_form\" name=\"loginform\" action=\"https:\/\/themify.org\/dev\/wp-login.php\" method=\"post\"> <# if ( data.fail_action == 'm' ) { #> <div class=\"tb_login_error\" contenteditable=\"false\" data-name=\"msg_fail\">{{ data.msg_fail }}<\/div> <# } #> <p class=\"tb_login_username\"> <label> <# if ( data.icon_username ) { #><em><# print( api.Helper.getIcon(data.icon_username).outerHTML ) #><\/em><# } #> <span class=\"tb_login_username_text\" contenteditable=\"false\" data-name=\"label_username\">{{ data.label_username }}<\/span> <input type=\"text\" name=\"log\" class=\"input\"> <\/label> <\/p> <p class=\"tb_login_password\"> <label> <# if ( data.icon_password ) { #><em><# print( api.Helper.getIcon(data.icon_password).outerHTML ) #><\/em><# } #> <span class=\"tb_login_password_text\" contenteditable=\"false\" data-name=\"label_password\">{{ data.label_password }}<\/span> <input type=\"password\" name=\"pwd\" class=\"input\"> <\/label> <\/p> <div class=\"tb_login_links\"> <# if ( data.icon_forgotten_password ) { #><em><# print( api.Helper.getIcon(data.icon_forgotten_password).outerHTML ) #><\/em><# } #> <a href=\"https:\/\/themify.org\/dev\/wp-login.php?action=lostpassword\" contenteditable=\"false\" data-name=\"label_forgotten_password\">{{ data.label_forgotten_password }}<\/a> <\/div> <# if ( data.remember_me_display == 'show' ) { #> <p class=\"tb_login_remember tf_left tf_box tf_clear\"> <label> <input name=\"rememberme\" type=\"checkbox\" value=\"forever\"> <# if ( data.icon_remember ) { #><em><# print( api.Helper.getIcon(data.icon_remember).outerHTML ) #><\/em><# } #> <span class=\"tb_login_remember_text\" contenteditable=\"false\" data-name=\"label_remember\">{{ data.label_remember }}<\/span> <\/label> <\/p> <# } #> <p class=\"tb_login_submit tf_right\"> <button contenteditable=\"false\" data-name=\"label_log_in\"><# if ( data.icon_log_in ) { #><em><# print( api.Helper.getIcon(data.icon_log_in).outerHTML ) #><\/em><# } #> {{ data.label_log_in }}<\/button> <input type=\"hidden\" name=\"redirect_to\"> <\/p> <\/form> <form class=\"tb_lostpassword_form\" name=\"lostpasswordform\" action=\"https:\/\/themify.org\/dev\/wp-login.php?action=lostpassword\" method=\"post\" style=\"display:none\"> <p class=\"tb_lostpassword_username\"> <label> <# if ( data.lostpasswordform_icon_username ) { #><em><# print( api.Helper.getIcon(data.lostpasswordform_icon_username).outerHTML ) #><\/em><# } #> <span class=\"tb_lostpassword_username_text\" contenteditable=\"false\" data-name=\"lostpasswordform_label_username\">{{ data.lostpasswordform_label_username }}<\/span> <input type=\"text\" name=\"user_login\" class=\"input\"> <\/label> <\/p> <p class=\"tb_lostpassword_submit tf_right\"> <button contenteditable=\"false\" data-name=\"lostpasswordform_label_reset\"><# if ( data.lostpasswordform_icon_reset ) { #><em><# print( api.Helper.getIcon(data.lostpasswordform_icon_reset).outerHTML ) #><\/em><# } #>{{ data.lostpasswordform_label_reset }}<\/button> <input type=\"hidden\" name=\"redirect_to\"> <\/p> <div class=\"tb_login_links\"> <a href=\"https:\/\/themify.org\/dev\/wp-login.php\" contenteditable=\"false\" data-name=\"label_log_in\">{{ data.label_log_in }}<\/a> <\/div> <\/form> <\/div> <\/div> ","map":" <# let w_unit = data.w_map_unit===undefined?'px':false, h_unit = data.w_map_unit===undefined?'px':false, args=Object.assign({ 'w_map_unit':'%', 'h_map_unit':'px', 'h_map':300, 'type_map':'ROADMAP', 'scrollwheel_map':'disable', 'draggable_map':'enable', 'map_control':'yes', 'draggable_disable_mobile_map':'yes', 'map_provider':'google' },data); if(w_unit=='px' && args.unit_w == '%'){ w_unit='%'; } let address = args.address_map?args.address_map.trim().replace(\/\\s\\s+\/g, ' '):'', info = !args.info_window_map?'<b>Address<\/b><br\/><p>#s#<\/p>'.replace('#s#',address):args.info_window_map; style = ''; if(args.b_width_map){ const b_type=!args.b_style_map?'solid':args.b_style_map; style+= 'border: '+b_type+' '+args.b_width_map+'px'; if (args.b_color_map) { style+=' '+api.Helper.toRGBA(args.b_color_map); } style+= ';'; } #> <div class=\"module module-map {{ args.css_map }}\"> <# if( args.mod_title_map ) { #> <h3 class=\"module-title\">{{{ args.mod_title_map }}}<\/h3> <# } if( args.map_provider == 'google' && args.map_display_type=='static' ) { let q = 'key='+''; if(address){ q+='&center='+address; } else if(args.latlong_map){ q+='&center='+args.latlong_map; } args.w_map_static=args.w_map_static+''; args.h_map=args.h_map+''; q+='&zoom='+args.zoom_map; q+='&maptype='+args.type_map.toLowerCase(); q+='&size='+args.w_map_static.replace(\/[^0-9]\/,'')+'x'+args.h_map.replace(\/[^0-9]\/,''); #> <img style=\"{{ style }}\" src=\"https:\/\/maps.googleapis.com\/maps\/api\/staticmap?{{ q }}\"> <# } else if( address || args.latlong_map ) { w_unit = w_unit || args.w_map_unit; h_unit = h_unit || args.h_map_unit; style+= 'width:'+args.w_map + w_unit+';'; style+= 'height:'+args.h_map + h_unit+';'; args.reverse = !address && args.latlong_map; args.address = address || args.latlong_map, args.scroll = args.scrollwheel_map == 'enable'?1:0, args.drag = args.draggable_map == 'enable'?1:0, args.mdrag=args.draggable_disable_mobile_map=='yes'?1:0, args.control = args.map_control == 'no' ? 1 : 0, args.type= args.map_provider == 'google'?args.type_map:args.bing_type_map; #> <div data-map-provider=\"{{ args.map_provider }}\" data-address=\"{{ args.address }}\" data-control=\"{{args.control}}\" data-zoom=\"{{ args.zoom_map }}\" data-type=\"{{ args.type }}\" data-scroll=\"{{ args.scroll }}\" data-drag=\"{{ args.drag }}\" data-mdrag=\"{{ args.mdrag }}\" class=\"themify_map<# print(args.map_provider != 'google'?' themify_bing_map':'')#>\" style=\"{{ style }}\" data-info-window=\"{{ args.info }}\" data-reverse-geocoding=\"{{ args.reverse }}\"><\/div> <# } #> <\/div> ","optin":" <div class=\"module module-optin {{ data.css }} {{ data.layout }}\"> <# if ( data.mod_title ) { #> <h3 class=\"module-title\">{{{ data.mod_title }}}<\/h3> <# } #> <form class=\"tb_optin_form\" name=\"tb_optin\" method=\"post\"> <# if ( ! data.fname_hide ) { #> <div class=\"tb_optin_fname\"> <label class=\"tb_optin_fname_text\" contenteditable=\"false\" data-name=\"label_firstname\">{{{ data.label_firstname }}}<\/label> <input type=\"text\" name=\"tb_optin_fname\" required=\"required\" <# if(data.fn_placeholder){ #> placeholder=\"{{ data.fn_placeholder }}\" <# } #>> <\/div> <# } #> <# if ( ! data.lname_hide ) { #> <div class=\"tb_optin_lname\"> <label class=\"tb_optin_lname_text\" contenteditable=\"false\" data-name=\"label_lastname\">{{{ data.label_lastname }}} <input type=\"text\" name=\"tb_optin_lname\" required=\"required\" <# if(data.ln_placeholder){ #> placeholder=\"{{ data.ln_placeholder }}\" <# } #>> <\/label> <\/div> <# } #> <div class=\"tb_optin_email\"> <label class=\"tb_optin_email_text\" contenteditable=\"false\" data-name=\"label_email\">{{{ data.label_email }}} <input type=\"email\" name=\"tb_optin_email\" required=\"required\" <# if(data.email_placeholder){ #> placeholder=\"{{ data.email_placeholder }}\" <# } #>> <\/label> <\/div> <# if ( data.gdpr == 'on' ) { #> <div class=\"tb_optin_gdpr\"> <label class=\"tb_optin_gdpr_text\" contenteditable=\"false\" data-name=\"gdpr_label\"> <input type=\"checkbox\" name=\"tb_optin_gdpr\" required=\"required\"> {{{ data.gdpr_label }}} <\/label> <\/div> <# } #> <div class=\"tb_optin_submit\"> <button> <# if ( data.button_icon ) { #><em><# print(api.Helper.getIcon(data.button_icon).outerHTML)#><\/em><# } #> <span contenteditable=\"false\" data-name=\"label_submit\">{{{ data.label_submit }}}<\/span> <\/button> <\/div> <\/form> <\/div> ","page-break":" <div class=\"module module-page-break\"> PAGE BREAK - <span class=\"page-break-order\"><\/span> <\/div> ","plain-text":" <div class=\"module module-plain-text {{ data.add_css_text }}\"> <div contenteditable=\"false\" data-name=\"plain_text\" data-hasEditor class=\"tb_text_wrap\">{{{ data.plain_text }}}<\/div> <\/div> ","service-menu":" <# var color = undefined === data.highlight_color_service_menu || 'default' == data.highlight_color_service_menu ? 'tb_default_color' : data.highlight_color_service_menu; #> <div class=\"module module-service-menu <# data.appearance_image_service_menu ? print( data.appearance_image_service_menu.split('|').join(' ') ) : ''; #> {{ data.style_service_menu }} {{ data.css_service_menu }} <# data.highlight_service_menu ? print( 'has-highlight ',color ) : print('no-highlight'); #>\"> <# if (data.highlight_service_menu && data.highlight_text_service_menu !== '') { #> <div class=\"tb-highlight-text\" contenteditable=\"false\" data-name=\"highlight_text_service_menu\">{{ data.highlight_text_service_menu}}<\/div> <# } const tag = data.title_tag?data.title_tag:'h4'; let image=''; if (data.image_service_menu){ #> <div class=\"tb-image-wrap tf_left\"> <# const icon=data.link_options == 'newtab'?'fa-external-link':'fa-search', tag = data.title_tag?data.title_tag:'h4', alt = '' !== data.title_service_menu ? data.title_service_menu : data.description_service_menu, w=data.width_service_menu || '', h=data.height_service_menu || ''; image ='<img src=\"'+ data.image_service_menu +'\" class=\"tb_menu_image\" data-w=\"height_service_menu\" data-h=\"height_service_menu\" alt=\"'+alt+'\" width=\"'+w+'\" height=\"'+h+'\">'; if (data.link_service_menu !== '') { let link_attrs = data.link_options == 'lightbox' ? 'class=\"lightbox-builder themify_lightbox\" ' : ''; link_attrs += data.link_options == 'newtab' ? 'rel=\"noopener\" target=\"_blank\" ' : ''; if(data.link_options == 'lightbox' && (data.lightbox_width !== '' || data.lightbox_height !== '')){ const lightbox_settings = [], units = {pixels: 'px',percents: '%'}; lightbox_settings.push(data.lightbox_width !== '' ? data.lightbox_width + units[data.lightbox_size_unit_width] : ''); lightbox_settings.push(data.lightbox_height !== '' ? data.lightbox_height + units[data.lightbox_size_unit_height] : ''); link_attrs += 'data-zoom-config=\"'+lightbox_settings.join(\"|\");+'\" '; } #> <a href=\"{{ data.link_service_menu }}\" {{ link_attrs }} > <# if (data.image_zoom_icon == 'zoom' && data.link_options != 'regular') { #> <span class=\"zoom\"><# print(api.Helper.getIcon(icon).outerHTML) #><\/span> <# } #> {{{ image }}} <\/a> <# }else{ #> {{{ image }}} <# } #> <\/div> <# } #> <div class=\"tb-image-content tf_overflow\"> <div class=\"tb-menu-title-wrap\"> <# if (data.title_service_menu !== '') { #> <{{tag}} class=\"tb-menu-title\" contenteditable=\"false\" data-name=\"title_service_menu\">{{ data.title_service_menu }}<\/{{tag}}> <# } if (data.description_service_menu !== '') { #> <div class=\"tb-menu-description\" contenteditable=\"false\" data-name=\"description_service_menu\">{{ data.description_service_menu }}<\/div> <# } #> <\/div> <!-- \/tb-menu-title-wrap --> <# if (data.price_service_menu !== '' || data.add_price_check !== undefined ) { #> <div class=\"tb-menu-price\"<# if(data.price_service_menu !== '' && data.add_price_check != 'yes'){#> data-name=\"price_service_menu\" contenteditable=\"false\"<#}#>> <# if( data.price_service_menu !== '' && data.add_price_check !== 'yes' ){ print(data.price_service_menu); } else if( data.add_price_check != undefined && data.add_price_check == 'yes'){ const arr=data.price_fields_holder || []; for(var i=0,len=arr.length;i<len;++i){#> <div class=\"tb-price-item\"> <# if(arr[i].label !== ''){ #> <div class=\"tb-price-title\" contenteditable=\"false\" data-name=\"label\" data-repeat=\"price_fields_holder\" data-index=\"{{i}}\">{{ arr[i].label }}<\/div> <# } if(arr[i].price !== ''){ #> <div class=\"tb-price-value\" contenteditable=\"false\" data-name=\"price\" data-repeat=\"price_fields_holder\" data-index=\"{{i}}\">{{arr[i].price}}<\/div> <# } #> <\/div> <# } } #> <\/div> <# } #> <\/div> <\/div> ","signup-form":" <div class=\"module module-signup-form {{ data.css }}\"> <# if ( data.mod_title ) { #> <h3 class=\"module-title\">{{{ data.mod_title }}}<\/h3> <# } #> <form class=\"tb_signup_form\" name=\"tb_signup_form\"> <div> <label> <span class=\"tb_signup_label\" contenteditable=\"false\" data-name=\"l_name\"><# if ( data.i_name ) { #><em><# print( api.Helper.getIcon(data.i_name).outerHTML ) #><\/em><# } #> {{{ data.l_name }}}<\/span> <\/label> <div class=\"tb_sp_name_wrapper\"> <div> <label> <input type=\"text\" name=\"first_n\"> <span contenteditable=\"false\" data-name=\"l_firstname\"><# if ( data.i_firstname ) { #><em><# print( api.Helper.getIcon(data.i_firstname).outerHTML ) #><\/em><# } #> {{{ data.l_firstname }}}<\/span> <\/label> <\/div> <div> <label> <input type=\"text\" name=\"last_n\"> <span contenteditable=\"false\" data-name=\"l_lastname\"><# if ( data.i_lastname ) { #><em><# print( api.Helper.getIcon(data.i_lastname).outerHTML ) #><\/em><# } #> {{{ data.l_lastname }}}<\/span> <\/label> <\/div> <\/div> <\/div> <div> <label> <span class=\"tb_signup_label\" data-required=\"yes\" contenteditable=\"false\" data-name=\"l_username\"><# if ( data.i_username ) { #><em><# print( api.Helper.getIcon(data.i_username).outerHTML ) #><\/em><# } #> {{{ data.l_username }}}<\/span> <input type=\"text\" name=\"usr\"> <\/label> <\/div> <div> <label> <span class=\"tb_signup_label\" data-required=\"yes\" contenteditable=\"false\" data-name=\"l_email\"><# if ( data.i_email ) { #><em><# print( api.Helper.getIcon(data.i_email).outerHTML ) #><\/em><# } #> {{{ data.l_email }}}<\/span> <input type=\"email\" name=\"email\"> <\/label> <\/div> <div> <label> <span class=\"tb_signup_label\" data-required=\"yes\" contenteditable=\"false\" data-name=\"l_password\"><# if ( data.i_password ) { #><em><# print( api.Helper.getIcon(data.i_password).outerHTML ) #><\/em><# } #> {{{ data.l_password }}}<\/span> <input type=\"password\" name=\"pwd\"> <\/label> <\/div> <div> <label> <span class=\"tb_signup_label\" contenteditable=\"false\" data-name=\"l_bio\"><# if ( data.i_bio ) { #><em><# print( api.Helper.getIcon(data.i_bio).outerHTML ) #><\/em><# } #> {{{ data.l_bio }}}<\/span> <textarea name=\"bio\"><\/textarea> <\/label> <# if ( '' !=data.desc ) { #> <p contenteditable=\"false\" data-name=\"desc\"><# if ( data.i_desc ) { #><em><# print( api.Helper.getIcon(data.i_desc).outerHTML ) #><\/em><# } #> {{{ data.desc }}}<\/p> <# } #> <\/div> <# if ( 'yes' == data.optin ) { #> <div> <label> <input type=\"checkbox\" name=\"optin\"> <span class=\"tb_signup_optin\" contenteditable=\"false\" data-name=\"optin_label\">{{{ data.optin_label }}}<\/span> <\/label> <\/div> <# } if ( 'on' == data.gdpr ) { #> <div> <label> <input type=\"checkbox\" name=\"gdpr\" required=\"required\"> <span class=\"tb_signup_gdpr\" contenteditable=\"false\" data-name=\"gdpr_label\">{{{ data.gdpr_label }}}<\/span> <\/label> <\/div> <# } #> <button name=\"tb_submit\" contenteditable=\"false\" data-name=\"l_submit\"><# if ( data.i_submit ) { #><em><# print( api.Helper.getIcon(data.i_submit).outerHTML ) #><\/em><# } #> {{{ data.l_submit }}}<\/button> <\/form> <\/div> ","social-share":" <# let nets = data.networks ? data.networks.split('|') : [], info={}; if(data.networks.length>0){ info = { fb:{icon:'ti-facebook',title:'Facebook',type:'facebook'}, tw:{icon:'ti-twitter-alt',title:'Twitter',type:'twitter'}, lk:{icon:'ti-linkedin',title:'Linkedin',type:'linkedin'}, pi:{icon:'ti-pinterest',title:'Pinterest',type:'pinterest'}, em:{icon:'ti-email',title:'Email',type:'email'} }; } #> <div class=\"module module-social-share {{ data.css_social_share }} tb_ss_style_{{ data.style }} tb_ss_shape_{{ data.shape }} tb_ss_size_{{ data.size }}\"> <# if ( data.mod_title ) { #> <h3 class=\"module-title\">{{{ data.mod_title }}}<\/h3> <# } #> <div class=\"module-social-share-wrapper\"> <# for(var i=0,len=nets.length;i<len;++i){ #> <div class=\"ss_anchor_wrap<# if('h'==data.arrangement) print(' tf_inline_b') #>\"> <a href=\"#\" data-type=\"{{ info[nets[i]].type }}\"> <em class=\"tb_social_share_icon\"><# print(api.Helper.getIcon(info[nets[i]].icon).outerHTML)#><\/em> <# if('no' == data.title){ #> <span class=\"tb_social_share_title\">{{{ info[nets[i]].title }}}<\/span> <# } #> <\/a> <\/div> <# } #> <\/div> <\/div> ","star":" <div class=\"module module-star {{ data.css }}\"> <# if ( data.m_t ) { #> <h3 class=\"module-title\">{{{ data.m_t }}}<\/h3> <# } #> <div class=\"tb_star_wrap\"> <# const rates=data.rates || []; for(var i=0,len=rates.length;i<len;++i){#> <div class=\"tb_star_item tb_star_animate\"> <# let item=rates[i], count =parseInt(item.count) || 5, rating = parseFloat(parseFloat(item.rating || count).toFixed(2)), defaultIcon=api.Helper.getIcon((item.ic || 'ti-star')), fillIcon=defaultIcon, halfIcon=defaultIcon; defaultIcon=defaultIcon.outerHTML; fillIcon.classList.add('tb_star_fill'); fillIcon=fillIcon.outerHTML; if(item.text_b){#> <span class=\"tb_star_text_b\" contenteditable=\"false\" data-name=\"text_b\" data-repeat=\"rates\" data-index=\"{{i}}\">{{item.text_b}}<\/span> <#} #> <div class=\"tb_star_container\"> <#for(var j=0;j<count;++j){ if((rating-j)>=1){ print(fillIcon) } else if(rating>j){ let gid='tb_'+data.cid+i, decimal =(rating-parseInt(rating)).toFixed(2), cl=halfIcon.classList; cl.add('tb_star_half'); cl.remove('tb_star_fill'); halfIcon.style.setProperty('--tb_star_half','url(#'+gid+')'); halfIcon=halfIcon.outerHTML; #> <svg width=\"0\" height=\"0\" aria-hidden=\"true\" style=\"visibility:hidden;position:absolute\"> <defs> <linearGradient id=\"{{gid}}\"> <stop offset=\"{{decimal*100}}%\" class=\"tb_star_fill\"\/> <stop offset=\"{{decimal*100}}%\" stop-color=\"currentColor\"\/> <\/linearGradient> <\/defs> <\/svg> <# print(halfIcon) } else{ print(defaultIcon) } }#> <\/div> <# if(item.text_a){#> <span class=\"tb_star_text_a\" contenteditable=\"false\" data-name=\"text_a\" data-repeat=\"rates\" data-index=\"{{i}}\">{{item.text_a}}<\/span> <#} #> <\/div> <#}#> <\/div> <\/div> ","tab":" <# const color = undefined === data.color_tab || 'default' == data.color_tab ? 'tb_default_color' : data.color_tab, tabId=data.cid.replace('tb_',''), arr=data.tab_content_tab || []; #> <div class=\"module module-tab ui tab-style-{{ data.style_tab }} {{ data.layout_tab }} {{ color }} {{ data.css_tab }} <# data.tab_appearance_tab ? print( data.tab_appearance_tab.split('|').join(' ') ) : ''; #>\" <# ( 'allow_tab' == data.allow_tab_breakpoint && '' != data.tab_breakpoint ) ? print( \"data-tab-breakpoint='\"+ data.tab_breakpoint +\"'\" ) : \"\"; #> > <# if ( data.mod_title_tab ) { #> <h3 class=\"module-title\">{{{ data.mod_title_tab }}}<\/h3> <# }#> <div class=\"builder-tabs-wrap tf_rel\"> <div class=\"tab-nav-current-active tf_hide\"> <span class=\"tab_burger_icon tf_hide tf_rel\"><\/span> <span class=\"tb_tab_title\" contenteditable=\"false\" data-name=\"title_tab\" data-repeat=\"tab_content_tab\" data-index=\"0\">{{{ (arr[0]?arr[0].title_tab:'') }}}<\/span> <\/div> <ul class=\"tab-nav tf_clearfix\"> <# for(var i=0,len=arr.length;i<len;++i){#> <li class=\"<# i == 0 && print('current') #>\" aria-expanded=\"{{i == 0}}\"> <a href=\"#tab-{{ tabId }}-{{ i }}\"> <# let item=arr[i]; if ( item ) { if ( item.icon_tab ) { #><em><# print(api.Helper.getIcon(item.icon_tab).outerHTML)#><\/em><# } if ( item.title_tab ) { #><span contenteditable=\"false\" data-name=\"title_tab\" data-repeat=\"tab_content_tab\" class=\"tb-tab-span\">{{{ item.title_tab }}}<\/span><# } } #> <\/a> <\/li> <# } #> <\/ul> <# for(var i=0;i<len;++i){#> <div data-id=\"tab-{{ tabId }}-{{ i }}\" class=\"tab-content tf_overflow tf_clear\" aria-hidden=\"{{i != 0}}\"> <div class=\"tb_text_wrap\" contenteditable=\"false\" data-name=\"text_tab\" data-index=\"{{i}}\" data-hasEditor data-repeat=\"tab_content_tab\"><# arr[i] && arr[i].text_tab && print( arr[i].text_tab ) #><\/div> <\/div> <# } #> <\/div> <\/div> ","testimonial-slider":" <# const arr=data.tab_content_testimonial || [], isSlider=!data.type_testimonial || data.type_testimonial=='slider', sliderCl=isSlider?' tf_swiper-slide':''; let margin='', arrow_vertical='', fullwidth_image=''; if(isSlider){ if (data.left_margin_slider>0) { margin+='margin-left:'+data.left_margin_slider+'px;'; } if (data.right_margin_slider>0) { margin+='margin-right:'+data.right_margin_slider+'px;'; } if(margin!==''){ margin=' style:\"'+margin+'\"'; } if(data.show_arrow_buttons_vertical=='vertical' && (!data.show_arrow_slider || data.show_arrow_slider=='yes')){ arrow_vertical=' themify_builder_slider_vertical'; } if(data.img_fullwidth_slider=='fullwidth'){ fullwidth_image=' themify_builder_slider_vertical'; } } #> <div class=\"module module-testimonial-slider<# isSlider && print(' themify_builder_slider_wrap') #> {{data.layout_slider}}{{arrow_vertical}}{{fullwidth_image}} {{ data.css_slider }} tf_clearfix\"> <# if ( data.mod_title_slider ) { #> <h3 class=\"module-title\">{{{ data.mod_title_slider }}}<\/h3> <# } if(!isSlider){ #> <div class=\"themify_builder_testimonial loops-wrapper builder-posts-wrap<# data.masonry=='enable' && print(' masonry') #> {{data.grid_layout_testimonial}} tf_rel tf_clear\"> <# } else{ const opt=Object.assign({ open_link_new_tab_slider:'no', auto_scroll_opt_slider:'off', effect_slider:'scroll', pause_on_hover_slider:'resume', play_pause_control:'no', wrap_slider:'yes', show_nav_slider:'yes', show_arrow_slider:'yes', unlink_feat_img_slider:'no', unlink_post_title_slider:'no', height_slider: 'variable' },data), speed = opt.speed_opt_slider == 'slow' ? 4 : (opt.speed_opt_slider == 'fast' ? .5 : 1); #> <div class=\"themify_builder_slider tf_carousel tf_swiper-container tf_rel tf_overflow\" data-tbreakpoints=\"{{api.Utils.getBPWidth('tablet_landscape')}}\" data-mbreakpoints=\"{{api.Utils.getBPWidth('mobile')}}\" data-visible=\"<# print(opt.horizontal== 'yes' ? 4 : opt.visible_opt_slider)#>\" data-tab-visible=\"{{opt.tab_visible_opt_slider}}\" data-mob-visible=\"{{opt.mob_visible_opt_slider}}\" data-scroll=\"{{opt.scroll_opt_slider}}\" <# arrow_vertical && print(' data-nav_out=\"1\"')#> <# if(opt.auto_scroll_opt_slider!='off'){#> data-auto=\"{{opt.auto_scroll_opt_slider*1000}}\" data-controller=\"<# print( opt.play_pause_control== 'yes'?1:0)#>\" data-pause_hover=\"<# print( opt.pause_on_hover_slider== 'resume'?1:0)#>\" <#}#> data-speed=\"{{speed}}\" data-wrapvar=\"<# print(opt.wrap_slider!= 'no'?1:0) #>\" data-slider_nav=\"<# print(opt.show_arrow_slider== 'yes'?1:0)#>\" data-pager=\"<# print(opt.show_nav_slider== 'yes'?1:0)#>\" data-effect=\"{{opt.effect_slider}}\" data-height=\"<# print(opt.horizontal== 'yes' ? 'variable' : opt.height_slider) #>\" data-horizontal=\"<# print(opt.horizontal== 'yes'?1:0)#>\" data-css_url=\"{{ThemifyBuilderModuleJs.cssUrl}}sliders\/carousel,{{ThemifyBuilderModuleJs.cssUrl}}sliders\/slider\" <# opt.touch_swipe && print(' data-touch_swipe=\"'+opt.touch_swipe+'\"')#> > <div class=\"tf_swiper-wrapper tf_lazy tf_rel tf_w tf_h tf_textc\"> <# } for(var i=0,len=arr.length;i<len;++i){ let item=arr[i], image = ''; if (item.person_picture_testimonial) { image='<img data-name=\"person_picture_testimonial\" data-repeat=\"tab_content_testimonial\" data-index=\"'+i+'\" data-w=\"img_w_slider\" data-h=\"img_h_slider\" src=\"'+item.person_picture_testimonial+'\"'; if(item.title_testimonial){ image+=' title=\"'+item.title_testimonial+'\"'; } if(data.img_w_slider>0){ image+=' width=\"'+data.img_w_slider+'\"'; } if(data.img_h_slider>0){ image+=' height=\"'+data.img_h_slider+'\"'; } image+='\/>'; } #> <div class=\"post{{sliderCl}}\"> <div class=\"testimonial-item\"{{margin}}> <div class=\"testimonial-content\"> <# if (item.title_testimonial){#> <h3 class=\"testimonial-title\" data-name=\"title_testimonial\" contenteditable=\"false\" data-repeat=\"tab_content_testimonial\" data-index=\"{{i}}\">{{{item.title_testimonial}}}<\/h3> <#} if(item.ic){#> <div class=\"tb_rating_wrap\"> <# let count =parseInt(item.count) || 5, rating = parseFloat(parseFloat(item.rating || count).toFixed(2)), defaultIcon=api.Helper.getIcon(item.ic), fillIcon=defaultIcon, halfIcon=defaultIcon; defaultIcon=defaultIcon.outerHTML; fillIcon.classList.add('tb_rating_fill'); fillIcon=fillIcon.outerHTML; for(var j=0;j<count;++j){ if((rating-j)>=1){ print(fillIcon) } else if(rating>j){ let gid='tb_'+data.cid+i, decimal =(rating-parseInt(rating)).toFixed(2), cl=halfIcon.classList; cl.add('tb_rating_half'); cl.remove('tb_rating_fill'); halfIcon.style.setProperty('--tb_rating_half','url(#'+gid+')'); halfIcon=halfIcon.outerHTML; #> <svg width=\"0\" height=\"0\" aria-hidden=\"true\" style=\"visibility:hidden;position:absolute\"> <defs> <linearGradient id=\"{{gid}}\"> <stop offset=\"{{decimal*100}}%\" class=\"tb_rating_fill\"\/> <stop offset=\"{{decimal*100}}%\" stop-color=\"currentColor\"\/> <\/linearGradient> <\/defs> <\/svg> <# print(halfIcon) } else{ print(defaultIcon) } }#> <\/div> <#} if (item.content_testimonial){#> <div class=\"testimonial-entry-content\" data-name=\"content_testimonial\" contenteditable=\"false\" data-repeat=\"tab_content_testimonial\" data-index=\"{{i}}\" data-haseditor> {{{item.content_testimonial}}} <\/div> <# } if (image){#> <figure class=\"testimonial-image tf_rel\"> <#print(image)#> <\/figure> <# } if (item.person_name_testimonial){ #> <div class=\"testimonial-author\"> <div class=\"person-name\" data-name=\"person_name_testimonial\" contenteditable=\"false\" data-repeat=\"tab_content_testimonial\" data-index=\"{{i}}\">{{item.person_name_testimonial}}<\/div> <# if (item.person_position_testimonial){ #> <span class=\"person-position\" data-name=\"person_position_testimonial\" contenteditable=\"false\" data-repeat=\"tab_content_testimonial\" data-index=\"{{i}}\">{{item.person_position_testimonial}}<\/span> <# } if (item.company_testimonial){#> <div class=\"person-company\" data-name=\"company_testimonial\" contenteditable=\"false\" data-repeat=\"tab_content_testimonial\" data-index=\"{{i}}\"> <# if (item.company_website_testimonial){ #> <a href=\"{{item.company_website_testimonial}}\" data-name=\"company_testimonial\" contenteditable=\"false\" data-repeat=\"tab_content_testimonial\" data-index=\"{{i}}\">{{item.company_testimonial}}<\/a> <#}else{ {{item.company_testimonial}} }#> <\/div> <#}#> <\/div> <# } #> <\/div> <\/div> <\/div> <#} if(isSlider){ #> <\/div> <#}#> <\/div> <\/div> ","toc":" <# let mark=data.mark || 'none', classes='tb_toc_'+mark, down=data.mic || 'ti-angle-down', up=data.mmic || 'ti-angle-up', bp= data.minimize=='yes'?data.bp:'', colapsedown=data.cic || '-', colapseup=data.cmic ||'+', min=data.min>1?data.min:2, max=data.maxt || '', maxh=data.maxh>2?data.maxh:32; if(data.num=='yes'){ classes+=' tb_toc_show_num'; } if(data.tree=='yes'){ classes+=' tb_toc_tree'; } #> <div class=\"module module-toc {{classes}}\"<#if(data.ex_m_t=='yes'){#> data-ex_m=\"1\"<#}#> data-min=\"{{min}}\" data-bp=\"{{bp}}\" data-maxh=\"{{maxh}}\" data-maxt=\"{{max}}\" data-tags=\"{{data.in_tags}}\" data-excl=\"{{data.ex_tags}}\" data-cont=\"{{data.in_cont}}\" data-sel=\"{{data.in_custom}}\"> <div class=\"tb_toc_head tf_clearfix\"> <#if ( data.m_t ) { #> <h3 class=\"module-title\">{{{ data.m_t }}}<\/h3> <# } if(data.minimize=='yes'){ print( api.Helper.getIcon( down,'tb_toc_mic_close' ).outerHTML ); print( api.Helper.getIcon( up,'tb_toc_mic tf_hide' ).outerHTML ) } #> <\/div> <# if(mark=='ic' && data.ic){#> <template class=\"tpl_toc_ic\"> <# print( api.Helper.getIcon( data.ic,'tb_toc_ic' ).outerHTML )#> <\/template> <# } if(data.tree=='yes' && data.colapse=='yes'){#> <template class=\"tpl_toc_cic\"> <# print( (colapsedown=='-'?'<span class=\"tf_fa tb_toc_cic\"><\/span>':api.Helper.getIcon( colapsedown,'tb_toc_cic' ).outerHTML) )#> <\/template> <template class=\"tpl_toc_cic_close\"> <# print( (colapseup=='+'?'<span class=\"tf_fa tb_toc_cic_close tf_hide\"><\/span>':api.Helper.getIcon( colapseup,'tb_toc_cic_close tf_hide' ).outerHTML) )#> <\/template> <#}#> <\/div> ","contact":" <# const def ={ field_email_active:'yes', field_name_active:'yes', field_message_active:'yes' }, orders={}, isAnimated=data.layout_contact=='animated-label', id=data.cid, vals=Object.assign(def,data); try{ field_extra =typeof vals.field_extra=='string'? JSON.parse(vals.field_extra):vals.field_extra; field_extra=field_extra.fields; } catch( e ){ field_extra = {}; } try{ field_order =typeof vals.field_order=='string'? JSON.parse(vals.field_order):vals.field_order; } catch( e ){ field_order = {} } if(!field_extra){ field_extra={}; } if(!field_order){ field_order={}; } \/* set default order *\/ if ( Object.keys( field_order ).length === 0 ) { field_order = { field_name_label: 0, field_email_label: 1, field_subject_label: 2, field_message_label: 3 }; } [ 'name', 'email', 'subject', 'message' ].forEach( function( v, i ) { if ( vals['field_' + v + '_active'] == 'yes' ) { orders[ field_order['field_' + v + '_label' ] ] = v; } } ); const selective_recipient = data.send_to_admins == 'true' && data.user_role == 'sr'; if ( selective_recipient ) { orders[ field_order['field_recipients_label' ] ] = 'recipients'; } for (let i in field_extra ) { orders[ field_extra[i].order ] = i; } #> <div class=\"module module-contact {{ vals.css_class_contact }} contact-{{ vals.layout_contact }}\"> <# if( vals.mod_title_contact ) { #> <h3 class=\"module-title\"> {{{ vals.mod_title_contact }}} <\/h3> <# } #> <form class=\"builder-contact\" method=\"post\"> <div class=\"contact-message\"><\/div> <div class=\"builder-contact-fields tf_rel\"> <# for(i in orders){ let k=orders[i]; if ( k=='name' || k=='email' || k=='subject' || k=='message' || k === 'recipients' ){ if ( k === 'recipients' && ! selective_recipient ) { continue; } let prefix ='field_'+k, required = k === 'recipients' || ('yes' == vals[prefix+'_active'] && 'yes' == vals[prefix+'_require'])?' required':'', inputName='contact-'+k, inputId=id+'-'+inputName, placeholder=!isAnimated?vals[prefix+'_placeholder']:' '; #> <div class=\"builder-contact-field builder-contact-field-{{k}}<#print((k=='message'?' builder-contact-textarea-field':' builder-contact-text-field'))#>\"> <label class=\"control-label\" for=\"{{inputId}}\"> <# if ( vals[ k + '_icon'] ){ #><em><# print( api.Helper.getIcon( vals[ k + '_icon'] ).outerHTML ) #><\/em><# } #> <span class=\"tb-label-span\" contenteditable=\"false\" data-name=\"{{prefix}}_label\"><# if (vals[prefix+'_label'] !== ''){#>{{vals[prefix+'_label']}}<\/span><#if ( required ){ #><span class=\"required\">*<\/span><# }} #> <\/label> <div class=\"control-input tf_rel\"> <# if ( k === 'recipients' ) { #> <# if ( data.sr_display === 'select' ) { #><select><# } #> <# for ( let i in data.sr ) { #> <# if ( data.sr_display === 'select' ) { #> <option>{{ data.sr[ i ]['label'] }}<\/option> <# } else { #> <label><input type=\"radio\">{{ data.sr[ i ]['label'] }}<\/label> <# } #> <# } #> <# if ( data.sr_display === 'select' ) { #><\/select><# } #> <# } else if ( k == 'message' ) { #> <textarea name=\"{{inputName}}\" placeholder=\"{{placeholder}}\" id=\"{{inputId}}\" class=\"form-control\" required><\/textarea> <# } else{#> <input type=\"text\" name=\"{{inputName}}\" placeholder=\"{{placeholder}}\" id=\"{{inputId}}\" class=\"form-control\"<#{{required}}#>> <# } if(isAnimated){#> <span class=\"tb_contact_label\"> <span class=\"tb-label-span\" contenteditable=\"false\" data-name=\"{{prefix}}_label\"><# if (vals[prefix+'_label'] !== ''){ #>{{vals[prefix+'_label']}}<\/span><# if ( required ){ #><span class=\"required\">*<\/span><# }} #> <\/span> <#}#> <\/div> <\/div> <# } else{ let field = field_extra[ k ]; if(!field){ continue; } let type=field.type, value=(field.value!==undefined && field.value!=='')?(typeof field.value=='string'?field.value.replace(\/\\\\\\\\\"\/g,'\"').replace(\/\\\\\\\\n\/g,'\\n'):field.value):'', label=(field.label!==undefined && field.label!=='')?field.label:'', inputName='field_extra_'+k, inputId='field_extra_'+id+'_'+k, required=true === field.required?' required':'', placeholder=!isAnimated && 'upload' != type?value:' '; field.icon = field.icon || ''; #> <div class=\"builder-contact-field builder-contact-field-extra<# if(type=='tel'){#> builder-contact-text-field<#}#> builder-contact-{{type}}-field\"> <label class=\"control-label\" for=\"{{inputId}}\"> <# if ( field.icon ){ #><em><# print( api.Helper.getIcon( field.icon ).outerHTML ) #><\/em><# } #> <span contenteditable=\"false\" data-name=\"1\">{{label}}<\/span> <# if(required){#> <span class=\"required\">*<\/span> <#}#> <\/label> <div class=\"control-input tf_rel\"> <# if( 'textarea' == type ){#> <textarea name=\"{{inputName}}\" id=\"{{inputId}}\" placeholder=\"{{placeholder}}\" class=\"form-control\"{{required}}><\/textarea> <# } else if( 'text' == type || 'tel' == type || 'upload' == type || 'email' === type || 'number' === type ){#> <input type=\"<#print((type=='upload'?'file':type))#>\" name=\"{{inputName}}\" id=\"{{inputId}}\" placeholder=\"{{placeholder}}\" class=\"form-control\"{{required}}> <# } else if( 'static' == type ){ print(value); } else if(value){ if( 'radio' == type || type=='checkbox'){ let count=value.length; for(let j in value){ #> <label> <input type=\"{{type}}\" name=\"{{inputName}}<#if(type=='checkbox'){#>[]<#}#>\" value=\"{{value[j]}}\" class=\"form-control\" <# if(required!='' && (type=='radio' || count===1)){#> {{required}} <#}#>> <span contenteditable=\"false\" data-name=\"1\">{{value[j]}}<\/span> <\/label> <# } } else if( 'select' == type ){#> <select id=\"{{inputId}}\" name=\"{{inputName}}\" class=\"form-control tf_scrollbar\"{{required}}> <# if ( ! required ) { #> <option><\/option> <#} for(let j in value){#> <option value=\"{{value[j]}}\">{{value[j]}}<\/option> <#}#> <\/select> <# } } if(isAnimated && ('text' == type || 'tel' == type || 'textarea' == type)){#> <span class=\"tb_contact_label\"> <span contenteditable=\"false\" data-name=\"1\">{{label}}<\/span> <#if( required){#> <span class=\"required\">*<\/span> <#}#> <\/span> <#}#> <\/div> <\/div> <# } } if( vals.field_captcha_active == 'yes' ) { #> <# let recaptcha_version = 'v2'; #> <div class=\"builder-contact-field builder-contact-field-captcha\"> <# if( '' !== vals.field_captcha_label && undefined !== vals.field_captcha_label ) { #> <label class=\"control-label\"> <span contenteditable=\"false\" data-name=\"field_captcha_label\">{{{ vals.field_captcha_label }}}<\/span> <span class=\"required\">*<\/span> <\/label> <# } #> <div class=\"control-input tf_rel\"> <div class=\"themify_captcha_field g-recaptcha\" data-sitekey=\"\" data-ver=\"v2\"><\/div> <\/div> <\/div> <# } if( vals.field_sendcopy_active=='yes' ) { #> <div class=\"builder-contact-field builder-contact-field-sendcopy\"> <div class=\"control-label\"> <div class=\"control-input tf_rel\"> <label class=\"send-copy\"> <input type=\"checkbox\" name=\"send-copy\" value=\"1\"> <span contenteditable=\"false\" data-name=\"field_sendcopy_label\">{{{vals.field_sendcopy_label}}}<\/span> <\/label> <\/div> <\/div> <\/div> <# } if ( vals.field_optin_active == 'yes' ) { #> <div class=\"builder-contact-field builder-contact-field-optin\"> <div class=\"control-label\"> <div class=\"control-input tf_rel\"> <label class=\"optin\"> <input type=\"checkbox\" name=\"optin\" value=\"1\"> <span contenteditable=\"false\" data-name=\"field_optin_label\">{{{vals.field_optin_label}}}<\/span> <\/label> <\/div> <\/div> <\/div> <# } if( 'accept' ==vals.gdpr ) { #> <div class=\"builder-contact-field builder-contact-field-gdpr\"> <div class=\"control-label\"> <div class=\"control-input tf_rel\"> <label class=\"field-gdpr\"> <input type=\"checkbox\" name=\"gdpr\" value=\"1\" required> <span contenteditable=\"false\" data-name=\"gdpr_label\">{{{vals.gdpr_label}}}<\/span> <span class=\"required\">*<\/span> <\/label> <\/div> <\/div> <\/div> <# } const send_align=undefined===data.field_send_align?'l':vals.field_send_align; #> <div class=\"builder-contact-field builder-contact-field-send control-input tf_text{{ send_align[0] }} tf_rel tf_clear\"> <button type=\"submit\" class=\"btn btn-primary\" contenteditable=\"false\" data-name=\"field_send_label\"><span class=\"tf_submit_icon\"><# if ( vals.send_icon ){ print( api.Helper.getIcon( vals.send_icon ).outerHTML ) } #><\/span> {{{ vals.field_send_label }}}<\/button> <\/div> <\/div> <\/form> <\/div> "}